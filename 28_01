[rszyee@ts-ug-6 ~]$ #!/usr/bin/python
[rszyee@ts-ug-6 ~]$ cd BS32011/Project-2
[rszyee@ts-ug-6 Project-2]$ #!/usr/bin/python
[rszyee@ts-ug-6 Project-2]$ infile='GDS5040_full.soft'
[rszyee@ts-ug-6 Project-2]$ fh = open(infile)
bash: syntax error near unexpected token `('
[rszyee@ts-ug-6 Project-2]$ 
[rszyee@ts-ug-6 Project-2]$ line= fh.readline()
bash: syntax error near unexpected token `('
[rszyee@ts-ug-6 Project-2]$ while line[:20] != '!dataset_table_begin':
>     line=fh.readline()
bash: syntax error near unexpected token `('
[rszyee@ts-ug-6 Project-2]$ fh = open(infile)
bash: syntax error near unexpected token `('
[rszyee@ts-ug-6 Project-2]$ ipython
Python 2.6.6 (r266:84292, Jul 10 2013, 22:48:45) 
Type "copyright", "credits" or "license" for more information.

IPython 1.2.1 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: #!/usr/bin/python

In [2]: infile='GDS5040_full.soft'

In [3]: fh = open(infile)

In [4]: line= fh.readline()

In [5]: while line[:20] != '!dataset_table_begin':
   ...:         line=fh.readline()
   ...:     

In [6]: header= fh.readline().strip()

In [7]: colnames={}

In [8]: index=0

In [9]: for title in header.split('\t'):
   ...:             colnames[title]=index
   ...:             print '%s\t%s'%(title,index)
   ...:             index=index+1
   ...:     
ID_REF	0
IDENTIFIER	1
GSM1062878	2
GSM1062879	3
GSM1062880	4
GSM1062875	5
GSM1062876	6
GSM1062877	7
Gene title	8
Gene symbol	9
Gene ID	10
UniGene title	11
UniGene symbol	12
UniGene ID	13
Nucleotide Title	14
GI	15
GenBank Accession	16
Platform_CLONEID	17
Platform_ORF	18
Platform_SPOTID	19
Chromosome location	20
Chromosome annotation	21
GO:Function	22
GO:Process	23
GO:Component	24
GO:Function ID	25
GO:Process ID	26
GO:Component ID	27

In [10]: genefile=open('genes.txt', 'w')

In [11]: expressionfile=open('expression.txt','w')

In [12]: probefile=open('probes.txt', 'w')

In [13]: genefields=['Gene ID', 'Gene symbol', 'Gene title']

In [14]: samples=header.split('\t')[2:int(colnames['Gene title'])]

In [15]: probefields=['ID_REF','Gene ID']

In [16]: def buildrow(row, fields):
   ....:     newrow=[]
   ....:     for f in fields:
   ....:         newrow.append(row[int(colnames[f])])
   ....:     return "\t".join(newrow)+"\n"
   ....: 

In [17]: def build_expression(row, samples):
   ....:     exprrows=[]
   ....:     for s in samples;
   ....:     for s in samples:
   ....:         newrow=[s,]
   ....:         newrow.append(row[int(colnames['ID_REF'])])
   ....:         newrow.append(row[int(colnames[s])])
   ....:         exprrows.append("\t".join(newrow))
   ....:         
  File "<ipython-input-17-d90aa7c69fee>", line 3
    for s in samples;
                    ^
SyntaxError: invalid syntax


In [18]: def build_expression(row, samples):
   ....:     exprrows=[]
   ....:     for s in samples:
   ....:         newrow=[s,]
   ....:         newrow.append(row[int(colnames['ID_REF'])])
   ....:         newrow.append(row[int(colnames[s])])
   ....:         exprrows.append("\t".join(newrow))
   ....:      return "\n".join(exprrows)+"\n"
   ....:  
  File "<ipython-input-18-62cee484d3d6>", line 8
    return "\n".join(exprrows)+"\n"
                                   ^
IndentationError: unindent does not match any outer indentation level

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [19]: def build_expression(row, samples):
   ....:     exprrows=[]
   ....:     for s in samples:
   ....:         newrow=[s,]
   ....:         newrow.append(row[int(colnames['ID_REF'])])
   ....:         newrow.append(row[int(colnames[s])])
   ....:         exprrows.append("\t".join(newrow))
   ....:     return "\n".join(exprrows)+"\n"
   ....: 

In [20]: rows=0

In [21]: for lines in fh.readlines():
   ....:     try:
   ....:         if line[0]=='!':
   ....:             continue
   ....:         row=line.strip().split('\t')
   ....:         genefile.write(buildrow(row, genefields))
   ....:         probefile.write(buildrow(row,probefields))
   ....:         expressionfile.write(build_expression(row, samples))
   ....:         rows=rows+1
   ....:     except:
   ....:         pass
   ....: genefile.close()    
   ....: probefile.close()
   ....: expressionfile.close()
   ....: 

In [22]: print '%s rows processed'%rows
0 rows processed

In [23]: 
