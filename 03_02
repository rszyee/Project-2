In [8]: for title in header.split('\t'):
   ...:     colnames[title]=index
   ...:     print '%s\t%s'%(title,index)
   ...:     index=index+1
   ...:     
ID_REF	0
IDENTIFIER	1
GSM1224909	2
GSM1224911	3
GSM1224913	4
GSM1224910	5
GSM1224912	6
GSM1224914	7
GSM1224903	8
GSM1224905	9
GSM1224907	10
GSM1224904	11
GSM1224906	12
GSM1224908	13
GSM1224893	14
GSM1224895	15
GSM1224897	16
GSM1224899	17
GSM1224901	18
GSM1224894	19
GSM1224896	20
GSM1224898	21
GSM1224900	22
GSM1224902	23
GSM1224883	24
GSM1224885	25
GSM1224887	26
GSM1224889	27
GSM1224891	28
GSM1224884	29
GSM1224886	30
GSM1224888	31
GSM1224890	32
GSM1224892	33
Gene title	34
Gene symbol	35
Gene ID	36
UniGene title	37
UniGene symbol	38
UniGene ID	39
Nucleotide Title	40
GI	41
GenBank Accession	42
Platform_CLONEID	43
Platform_ORF	44
Platform_SPOTID	45
Chromosome location	46
Chromosome annotation	47
GO:Function	48
GO:Process	49
GO:Component	50
GO:Function ID	51
GO:Process ID	52
GO:Component ID	53

In [9]: genefile=open('genes.txt', 'w')

In [10]: expressionfile=open('expression.txt','w')

In [11]: probefile=open('probes.txt', 'w')

In [12]: genefields=['Gene ID', 'Gene symbol', 'Gene title']

In [13]: samples=header.split('\t')[2:int(colnames['Gene title'])]

In [14]: probefields=['ID_REF','Gene ID']

In [15]: def buildrow(row, fields):
   ....:     '''Creates a tab separated list of values according to the columns listed in fields
   ....:     row : a list of values
   ....:     fields : a list of columns. Only the values in row corresponding to the columns in fields are output 
   ....:     returns : A string that is a tab separated list of values terminated with a newline
   ....:     '''
   ....:     

In [16]: buildrow(row)   
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-16-917b9d46d26a> in <module>()
----> 1 buildrow(row)

NameError: name 'row' is not defined

In [17]: buildrow(row, fields)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-17-4f4df953c7bb> in <module>()
----> 1 buildrow(row, fields)

NameError: name 'row' is not defined

In [18]: def buildrow
  File "<ipython-input-18-db027b9db095>", line 1
    def buildrow
                ^
SyntaxError: invalid syntax


In [19]: def buildrow(row, fields)
  File "<ipython-input-19-26170bbe34db>", line 1
    def buildrow(row, fields)
                             ^
SyntaxError: invalid syntax


In [20]: def buildrow(row, fields): 
   ....:        '''Creates a tab separated list of values according to the columns listed in fields
   ....:        row: a list of values
   ....:        fields: a list of columns. Only the values in row corresponding to the columns in fields are output
   ....:        returns: A string that is a tab separated list of values terminated with a newline
   ....:        '''
   ....:     newrow=[]
   ....:     for f in fields: 
   ....:         newrow.append(row[int(colnames[f])])
   ....:     return "\t".join(newrow)+"\n"
  File "<ipython-input-20-39c6fc5fbcb9>", line 7
    newrow=[]
             ^
IndentationError: unindent does not match any outer indentation level

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [21]: def buildrow(row, fields):
   ....:        '''Creates a tab separated list of values according to the columns listed in fields
   ....:        row: a list of values
   ....:        fields: a list of columns. Only the values in row corresponding to the columns in fields are output
   ....:        returns: A string that is a tab separated list of values terminated with a newline'''
   ....:     newrow=[]
   ....:     for f in fields:
   ....:         newrow.append(row[int(colnames[f])])
   ....:     return "\t".join(newrow)+"\n"
  File "<ipython-input-21-ceab64ecb68a>", line 6
    newrow=[]
             ^
IndentationError: unindent does not match any outer indentation level

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [22]: 
KeyboardInterrupt

In [22]: def buildrow(row, fields):
   ....:        '''Creates a tab separated list of values according to the columns listed in fields
   ....:        row: a list of values
   ....:        fields: a list of columns. Only the values in row corresponding to the columns in fields are output
   ....:        returns: A string that is a tab separated list of values terminated with a newline
   ....:        '''
   ....:         newrow=[]
   ....:         for f in fields:
   ....:                 newrow.append(row[int(colnames[f])])
   ....:             return "\t".join(newrow)+"\n"
   ....:     
  File "<ipython-input-22-d453b53bf2d9>", line 10
    return "\t".join(newrow)+"\n"
                                 ^
IndentationError: unindent does not match any outer indentation level

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [23]: def buildrow(row, fields):
   ....:        '''Creates a tab separated list of values according to the columns listed in fields
   ....:        row: a list of values
   ....:        fields: a list of columns. Only the values in row corresponding to the columns in fields are output
   ....:        returns: A string that is a tab separated list of values terminated with a newline
   ....:        '''
   ....:         newrow=[]
   ....:         for f in fields:
   ....:                 newrow.append(row[int(colnames[f])])
   ....:         return "\t".join(newrow)+"\n"
   ....:     

In [24]: buildrow
Out[24]: <function __main__.buildrow>

In [25]: buildrow(row, fields)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-25-4f4df953c7bb> in <module>()
----> 1 buildrow(row, fields)

NameError: name 'row' is not defined

In [26]: def buildrow(row, fields)
  File "<ipython-input-26-26170bbe34db>", line 1
    def buildrow(row, fields)
                             ^
SyntaxError: invalid syntax


In [27]: def buildrow             
  File "<ipython-input-27-db027b9db095>", line 1
    def buildrow
                ^
SyntaxError: invalid syntax


In [28]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed 
   ....:        it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:         exprrows=[]
   ....:         for s in samples:
   ....:                 newrow=[s,]
   ....:                newrow.append(row[int(colnames['ID_REF'])])
   ....:            ....:                newrow.append(row[int(colnames['ID_REF'])])
   ....:         
  File "<ipython-input-28-d1f9af3fa8ce>", line 11
    ....:                newrow.append(row[int(colnames['ID_REF'])])
                                                                    ^
IndentationError: unindent does not match any outer indentation level

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [29]: 

In [29]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed 
   ....:        it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:         exprrows=[]
   ....:         for s in samples:
   ....:                newrow=[s,]
   ....:                
  File "<ipython-input-29-695d10b88f47>", line 8
    for s in samples:
    ^
IndentationError: unexpected indent

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [30]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed 
   ....:        it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:         exprrows=[]
   ....:         for s in samples:
   ....:                 newrow=[s,]
   ....:                 newrow.append(row[int(colnames['ID_REF'])])
   ....:                 newrow.append(row[int(colnames[s])])
   ....:                 exprrows.append("\t".join(newrow))
   ....:         return "\n".join(exprrows)+"\n"
   ....:     
  File "<ipython-input-30-cec10e90d94d>", line 10
    newrow.append(row[int(colnames['ID_REF'])])
    ^
IndentationError: unexpected indent

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [31]: %paste
return "\n".join(exprrows)+"\n"

## -- End pasted text --
  File "<ipython-input-31-ccee31a9f76c>", line 1
    return "\n".join(exprrows)+"\n"
SyntaxError: 'return' outside function


In [32]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed 
   ....:        it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:         exprrows=[]
   ....:         for s in samples:
   ....:                 newrow=[s,]
   ....:                newrow.append(row[int(colnames['ID_REF'])])
   ....:                newrow.append(row[int(colnames[s])])
   ....:                exprrows.append("\t".join(newrow))
   ....:             return "\n".join(exprrows)+"\n"
   ....: return "\n".join(exprrows)+"\n"
Display all 367 possibilities? (y or n)
   ....:         return "\n".join(exprrows)+"\n"
  File "<ipython-input-32-0f2ab0b4fefd>", line 13
    return "\n".join(exprrows)+"\n"
                                   ^
IndentationError: unindent does not match any outer indentation level

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [33]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed 
   ....:        it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:     exprrows=[]
   ....:     for s in samples@
   ....:     for s in samples:
   ....:         newrow=[s,]
   ....:         newrow.append(row[int(colnames['ID_REF'])])
   ....:         newrow.append(row[int(colnames[s])])
   ....:         exprrows.append("\t".join(newrow))
   ....:     return "\n".join(exprrows)+"\n"
  File "<ipython-input-33-b418f1b638c4>", line 7
    exprrows=[]
               ^
IndentationError: unindent does not match any outer indentation level

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [34]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed 
   ....:        it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:         exprrows=[]
   ....:         for s in samples:
   ....:         for s in samples:
   ....:             newrow=[s,]
   ....:             newrow.append(row[int(colnames['ID_REF'])])
   ....:             newrow.append(row[int(colnames[s])])
   ....:             exprrows.append("\t".join(newrow))
   ....:         return "\n".join(exprrows)+"\n"
   ....:     
  File "<ipython-input-34-6576cbdc2dfe>", line 9
    for s in samples:
      ^
IndentationError: expected an indented block

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [35]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed 
   ....:        it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:         exprrows=[]
   ....:         for s in samples:
   ....:                 newrow=[s,]
   ....:                newrow.append(row[int(colnames['ID_REF'])])
   ....:                newrow.append(row[int(colnames[s])])
   ....:                exprrows.append("\t".join(newrow))
   ....:         return "\n".join(exprrows)+"\n"
   ....:     
  File "<ipython-input-35-934886d9b641>", line 8
    for s in samples:
    ^
IndentationError: unexpected indent

If you want to paste code into IPython, try the %paste and %cpaste magic functions.

In [36]: def build_expression(row, samples):
   ....:        '''Builds tab separated rows for expression data. For each of the samples listed it generates a line with the probe id, sample id and expression value.
   ....:        row: a list of values
   ....:        samples: a list of column headings corresponding to the samples
   ....:        '''
   ....:        exprrows=[]
   ....:        for s in samples:
   ....:                newrow=[s,]
   ....:                newrow.append(row[int(colnames['ID_REF'])])
   ....:                newrow.append(row[int(colnames[s])])
   ....:                exprrows.append("\t".join(newrow))
   ....:         

In [37]: return "\n".join(exprrows)+"\n"
  File "<ipython-input-37-ccee31a9f76c>", line 1
    return "\n".join(exprrows)+"\n"
SyntaxError: 'return' outside function


In [38]: def build_expression(row, samples):
   ....:     '''Builds tab separated rows for expression data. For each of the samples listed it generates a line with the probe id, sample id and expression value.
   ....:     row: a list of values
   ....:     samples: a list of column headings corresponding to the samples'''
   ....:     exprrows=[]
   ....:     for s in samples:
   ....:         newrow=[s,]
   ....:         newrow.append(row[int(colnames['ID_REF'])])
   ....:         newrow.append(row[int(colnames[s])])
   ....:         exprrows.append("\t".join(newrow))
   ....:     return "\n".join(exprrows)+"\n"
   ....: 

In [39]: rows=0

In [40]: for line in fh.readlines():
   ....:     try:
   ....:         if line[0]=='!':
   ....:             continue
   ....:         row=line.strip().split('\t')
   ....:         genefile.write(buildrow(row, genefields))
   ....:         probefile.write(buildrow(row,probefields))
   ....:         
   ....:         expressionfile.write(build_expression(row, samples))
   ....:         rows=rows+1
   ....:     except:
   ....:         pass
   ....: genefile.close()
   ....: probefile.close()
   ....: expressionfile.close()
   ....:     
print
In [41]: print '%s rows processed'%rows
52894 rows processed

In [42]: mysql -u rszyee -p
  File "<ipython-input-42-2d4f8035fcb9>", line 1
    mysql -u rszyee -p
                  ^
SyntaxError: invalid syntax


In [43]:  
Do you really want to exit ([y]/n)? y
[rszyee@ts-ug-6 Project-2]$ cd
[rszyee@ts-ug-6 ~]$ cd BS32011/BS32011/sql
[rszyee@ts-ug-6 sql]$ mysql -u rszyee -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 88
Server version: 5.1.69 Source distribution

Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> connect rszyee
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Connection id:    89
Current database: rszyee

mysql> show tables;
+------------------+
| Tables_in_rszyee |
+------------------+
| expression       |
| sequence         |
+------------------+
2 rows in set (0.00 sec)

mysql> CREATE TABLE sequence (
    -> id integer not null primary key auto_increment,
    -> accession varchar(10) not null,
    -> nucleotide enum('N','P'),
    -> length integer not null,
    -> gccontent float not null,
    -> description varchar(256),
    -> organism varchar(50) not null
    ->   
    -> );
ERROR 1050 (42S01): Table 'sequence' already exists
mysql> CREATE TABLE sample (id integer not null primary key auto_increment,
    -> accession varchar(10) not null,
    -> nucleotide enum('N','P'),
    -> length integer not null,
    -> gccontent float not null,
    -> description varchar(256),
    -> organism varchar(50) not null
    -> );
Query OK, 0 rows affected (0.01 sec)

mysql> describe sample;
+-------------+---------------+------+-----+---------+----------------+
| Field       | Type          | Null | Key | Default | Extra          |
+-------------+---------------+------+-----+---------+----------------+
| id          | int(11)       | NO   | PRI | NULL    | auto_increment |
| accession   | varchar(10)   | NO   |     | NULL    |                |
| nucleotide  | enum('N','P') | YES  |     | NULL    |                |
| length      | int(11)       | NO   |     | NULL    |                |
| gccontent   | float         | NO   |     | NULL    |                |
| description | varchar(256)  | YES  |     | NULL    |                |
| organism    | varchar(50)   | NO   |     | NULL    |                |
+-------------+---------------+------+-----+---------+----------------+
7 rows in set (0.00 sec)

mysql> Bye                    
[rszyee@ts-ug-6 sql]$ 
